{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd45 Keeper","text":"<p>A Gradle plugin that infers Proguard/R8 keep rules for androidTest sources.</p> <p>Keeper hooks into R8 to add extra keep rules based on what androidTest classes use from the target app\u2019s sources. This is necessary because the Android Gradle Plugin (AGP) does not currently factor in androidTest usages of target app sources when running the minification step, which can result in runtime errors if APIs used by tests are removed.</p> <p>This is (really) useful only if you run your instrumentation tests against your minified release builds! If you don\u2019t run these tests against minified builds, then you don\u2019t need this plugin. The build type that you test against is controlled by the <code>testBuildType</code> flag, which is set to <code>debug</code> by default.</p> <p>This is a workaround until AGP supports this: https://issuetracker.google.com/issues/126429384.</p> <p>Note: Keeper uses private APIs from AGP and could break between releases. See the changelog to check what versions are supported with each release.</p>"},{"location":"#installation","title":"Installation","text":"<p>Keeper is distributed via Maven Central. Apply the keeper Gradle plugin in your application\u2019s build.gradle. Keeper requires Gradle 7.0 or higher and AGP 7.1.0 or higher.</p> <p>Keeper can be consumed via regular gradle <code>plugins {}</code> block.</p> <pre><code>plugins {\n  id(\"com.android.application\") // &lt;- Keeper only works with com.android.application!\n  id(\"com.slack.keeper\") version \"x.y.z\"\n}\n</code></pre> <p>Note that we still publish to Maven Central, so you would need to add it to the repositories list in <code>settings.gradle</code>.</p> <pre><code>pluginsManagement {\n  repositories {\n    mavenCentral() // woo-hoo!\n    gradlePluginPortal() // there by default\n  }\n}\n</code></pre> <p>Alternatively, it can be consumed via manual buildscript dependency + plugin application.</p> <pre><code>buildscript {\n  dependencies {\n    // ...\n    classpath \"com.slack.keeper:keeper:x.y.z\"\n  }\n}\n\napply plugin: \"com.android.application\" // &lt;- Keeper only works with com.android.application!\napply plugin: \"com.slack.keeper\"\n</code></pre> <p>Full configuration defaults can be found on the Configuration page.</p> <p>Snapshots of the development version are available in Sonatype\u2019s <code>snapshots</code> repository.</p>"},{"location":"#under-the-hood","title":"Under the hood","text":"<p>The general logic flow:</p> <ul> <li>Create a custom <code>r8</code> configuration for the R8 dependency.</li> <li>Register two jar tasks per <code>androidTest</code> variant. One for all the classes in its target <code>testedVariant</code>   and one for all the classes in the androidTest variant itself. This will use their variant-provided   <code>JavaCompile</code> tasks and <code>KotlinCompile</code> tasks if available.</li> <li>Register a <code>infer${androidTestVariant}UsageForKeeper</code>   task that plugs the two aforementioned jars into R8\u2019s <code>TraceReferences</code> CLI and outputs the inferred   proguard rules into a new intermediate <code>.pro</code> file.</li> <li>Finally - the generated file is wired in to R8 via private task APIs and setting their   <code>configurationFiles</code> to include our generated one.</li> </ul> <p>Appropriate task dependencies (via inputs/outputs, not <code>dependsOn</code>) are set up, so this is automatically run as part of the target app variant\u2019s full minified APK.</p> <p>The tasks themselves take roughly ~20 seconds total extra work in our Slack android app, with the infer and app jar tasks each taking around 8-10 seconds and the androidTest jar taking around 2 seconds.</p>"},{"location":"#core-library-desugaring-l8-support","title":"Core Library Desugaring (L8) Support","text":"<p>Library Desugaring (L8) was introduced in Android Gradle Plugin 4.0. To make this work, the R8 task will generate proguard rules indicating which <code>j$</code> types are used in source, which the <code>L8DexDesugarLibTask</code> then uses to know which desugared APIs to keep. This approach can have flaws at runtime though, as the classpath of the test APK may not have the right <code>j$</code> classes available on its classpath to run app code it is invoking. To work around this, Keeper does two things:</p> <ol> <li>Keeper merges generated L8 rules from both the androidTest and target app to ensure they cover all    used APIs. These merged rules are given to the target app <code>L8DexDesugarLibTask</code>.</li> <li>L8 will still, by default, generate a dex file of backported APIs into both the test app and target    app, which can cause confusing runtime classpath issues due to L8 generating different implementations    in each app. Keeper works around this by forcing the use of a single dex file in the target app and    preventing the inclusion of a backport dex file in the test app.</li> </ol> <p>This L8 support is automatically enabled if <code>android.compileOptions.coreLibraryDesugaringEnabled</code> is true in AGP.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright (C) 2020 Slack Technologies, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#0160","title":"0.16.0","text":"<p>2024-05-09</p> <ul> <li>Enhancement: Support for AGP 8.4.0. AGP 8.4.0 is the minimum supported version now.</li> <li>Update Gradle to <code>8.7</code>.</li> <li>Remove support for <code>keeper.disableTestProguardFiles</code> as this API can no longer with with newer AGP versions.</li> </ul> <p>HELP WANTED: This project is no longer used by Slack. If your company uses this plugin and is interested in maintaining a fork, see https://github.com/slackhq/keeper/discussions/144.</p>"},{"location":"changelog/#0150","title":"0.15.0","text":"<p>2023-07-25</p> <ul> <li>Enhancement: Support AGP 8.1.0. AGP 8.1.0 is the minimum required version now due to breaking API changes.</li> <li>Update Gradle to <code>8.2.1</code>.</li> </ul>"},{"location":"changelog/#0140","title":"0.14.0","text":"<p>2023-04-15</p> <p>Happy new year!</p> <ul> <li>Enhancement: Support AGP 8.0. AGP 7.x and lower are no longer supported.</li> <li>Enhancement: Use new AGP APIs for retrieving all compiled classes, better supporting configuration cache.</li> <li>Enhancement: Better support configuration cache in Gradle 8.x in general.</li> <li>Enhancement: Add new <code>keeper.disableTestProguardFiles</code> flag gradle property to optionally disable merging in test proguard files.</li> <li>Enhancement: <code>InferAndroidTestKeepRules</code> no longer extends <code>JavaExec</code>.</li> <li>Enhancement: <code>PrintUses</code> support is removed entirely.</li> <li>Fix: Use <code>artifactFiles</code> instead of <code>resolvedArtifacts</code> for resolving proguard files.</li> </ul>"},{"location":"changelog/#0130","title":"0.13.0","text":"<p>2022-12-09</p> <ul> <li>Enhancement: Use Gradle 7.5\u2019s new <code>ArtifactCollection</code> APIs to for better task input wiring. This allows us to remove the previous hack where we used the target <code>Configuration</code> as an internal property. This also improves configuration caching support. Gradle 7.5 is now the minimum required Gradle version.</li> <li>Enhancement: Use AGP\u2019s new <code>Component.runtimeConfiguration</code> API. AGP 7.3 is now the minimum required AGP version.</li> <li>Enhancement: Removed KGP and kotlin-dsl dependencies. Keeper inappropriately included implementation dependencies on these two and no longer does. This is a breaking change for users who were using these dependencies in their build scripts and you should add them separately if you\u2019re using them.</li> <li>Removed: <code>PrintUses</code> is no longer supported as this API has been removed from R8 and now only <code>TraceReferences</code> is used.</li> <li>Removed: Removed deprecated <code>enableL8RuleSharing</code> and <code>traceReferences.enabled</code> properties in the Keeper gradle extension.</li> </ul>"},{"location":"changelog/#0120","title":"0.12.0","text":"<p>2022-02-02</p> <p>New: Update to AGP 7.1 APIs</p> <p>Keeper now requires AGP 7.1.0 or higher and has been reworked to use AGP\u2019s new extension APIs. As such, the <code>variantFilter</code> API has now been removed.</p> <p>In order to enable Keeper on a particular variant, you must register the <code>KeeperVariantMarker</code> extension in AGP\u2019s <code>VariantBuilder</code> API like so:</p> <pre><code>androidComponents {\n  beforeVariants { builder -&gt;\n    if (shouldRunKeeperOnVariant()) {\n      builder.optInToKeeper() // Helpful extension function\n    }\n  }\n}\n</code></pre> <p>Or in Groovy</p> <pre><code>androidComponents {\n  beforeVariants { builder -&gt;\n    if (shouldRunKeeperOnVariant(builder)) {\n      builder.registerExtension(KeeperVariantMarker.class, KeeperVariantMarker.INSTANCE)\n    }\n  }\n}\n</code></pre> <p>Keeper\u2019s default behavior with no configuration effectively be a no-op, which isn\u2019t what you want!</p> <p>Other updates</p> <ul> <li>Remove shaded ZipFlinger APIs, ZipFlinger is now used directly</li> <li>Update Kotlin to <code>1.6.10</code></li> </ul>"},{"location":"changelog/#0112","title":"0.11.2","text":"<p>2022-01-27</p> <ul> <li>Fix: Fix a configuration caching issue when L8 rule sharing is enabled.</li> </ul>"},{"location":"changelog/#0111","title":"0.11.1","text":"<p>2021-08-31</p> <ul> <li>Fix: Keeper\u2019s intermediate jar creation tasks previously accepted dependencies inputs based on content only. This caused build caching issues across multiple machines with Gradle remote cache enabled because it would then attempt to use the previous build\u2019s absolute path to those dependency jars and subsequently fail. This is now fixed by reworking this logic internally a bit and using absolute path sensitivity for that input. This should ensure that caching still works like before across the same machine/paths but will properly be out of date when the absolute paths change across different machines.</li> </ul>"},{"location":"changelog/#0110","title":"0.11.0","text":"<p>2021-07-29</p> <ul> <li>Minimum supported AGP version is now <code>7.0.0</code>. It may work on older versions but YMMV.</li> <li>Update embedded ZipFlinger to <code>7.0.0</code> and update to its new <code>Path</code> constructors.</li> <li>Update to Kotlin <code>1.5.21</code></li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<p>2021-06-09</p> <ul> <li>Core Library Desugaring is now fully supported. See its section in on the project site for more details!</li> <li>The <code>keeper.enableL8RuleSharing</code> Gradle API is now deprecated and does nothing. L8 support is automatically enabled if <code>android.compileOptions.coreLibraryDesugaringEnabled</code> is true in AGP.</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<p>2021-05-20</p> <ul> <li>New: Support for Gradle 7.0.<ul> <li>If you read diagnostic outputs, note that these are now always written to a unique directory per task.</li> </ul> </li> <li>New: Experimental support for AGP 7.0.0 (tested up to beta01).</li> <li>New: Support for JDK 11 (possibly higher, but we test only JDK 11).</li> <li>We no longer ship a copy of ZipFlinger and now just use it directly from AGP.</li> <li>AGP 4.1.x is no longer supported.<ul> <li>It may work, but we no longer test against it. New minimum supported version is AGP 4.2.0.</li> </ul> </li> <li>Proguard is no longer supported.<ul> <li>It may work, but we no longer test against it. Only R8 is officially supported now.</li> </ul> </li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<p>2021-01-04</p> <ul> <li>New: Experimental support for the new upcoming <code>TraceReferences</code> tool from R8, which is the successor for the current <code>PrintUses</code> CLI that Keeper uses. See configuration instructions for more details.</li> <li>Updated to Kotlin 1.4.21.</li> </ul> <p>Special thanks to @pgreze for contributing the TraceReferences support in this release!</p>"},{"location":"changelog/#070","title":"0.7.0","text":"<p>2020-09-25</p> <ul> <li>New: <code>enableL8RuleSharing</code> feature for sharing generated proguard rules between androidtest and main APK assembly. See configuration instructions for more details.</li> <li>Make the default behavior to ignore minifyEnabled = false variants (#61)</li> <li>Built against Kotlin 1.4, using its new <code>explicitApi()</code> mode</li> <li>ZipFlinger is now manually copied in due to shadow jar packaging issues. This version is current with AGP 4.1.0-rc03</li> </ul> <p>Special thanks to @colintheshots for contributing to this release.</p> <p>Heads up!</p> <p>We\u2019re considering dropping support for Proguard. Please let us know if you need this.</p>"},{"location":"changelog/#060","title":"0.6.0","text":"<p>2020-06-09</p> <ul> <li>Keeper now supports Gradle Configuration Caching<ul> <li>Note: At the time of writing, Gradle\u2019s <code>JavaExec</code> task (which Keeper uses) does not support it yet. This is expected to be resolved in Gradle 6.6.</li> </ul> </li> <li>Keeper requires AGP 4.0.0 (minimum) now.</li> <li>Diagnostics improvements<ul> <li>Enabling extra debug information now also triggers printing of text files with a list of all seen classes in respective jars, for easy checking.</li> <li>Diagnostics are now under build/intermediates/keeper/diagnostics.</li> <li>Note that \u201capp jars\u201d are not under the new diagnostics directory, but rather in the main keeper directory. These are now used as a task input internally.</li> </ul> </li> <li>Some minor under the hood enhancements to avoid processing app classpath twice.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<p>2020-05-28</p> <ul> <li>Keeper now supports AGP 4.0 and 4.1!</li> <li>New <code>enableAssertions</code> property to control assertions behavior when running R8\u2019s <code>PrintUses</code> CLI. This can be useful when debugging errors, as R8 will print those errors out to the generated proguard file instead if you disable this (the default is enabled).</li> </ul> <pre><code>keeper {\n enableAssertions.set(false)\n}\n</code></pre>"},{"location":"changelog/#043","title":"0.4.3","text":"<p>2020-05-17</p> <ul> <li>ZipFlinger updated to 4.1.0-alpha09, which allows us to support Zip64. To avoid conflicts with AGP, we now shade ZipFlinger in directly.</li> <li>Kotlin 1.3.72</li> </ul> <p>Note: versions 0.4.0-0.4.2 had packaging issues, please skip to 0.4.3.</p>"},{"location":"changelog/#032","title":"0.3.2","text":"<p>2020-05-6</p> <ul> <li>Fix support for Gradle 6.4. We assumed that the new <code>exclusiveContent</code> API on maven repositories would be fixed in this version, but it had another regression.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<p>2020-03-28</p> <p>Edit: Release failed to upload, we\u2019re working on a fix. In the meantime continue to use 0.3.0 and the regular non-<code>plugins {}</code> approach.</p> <p>Keeper can now be consumed via regular gradle <code>plugins {}</code> block.</p> <pre><code>plugins {\n  id(\"com.slack.keeper\") version \"0.3.1\"\n}\n</code></pre> <p>Note that we still publish to Maven Central, so you would need to add it to the repositories list in <code>settings.gradle</code>.</p> <pre><code>pluginsManagement {\n  repositories {\n    mavenCentral() // woo-hoo!\n    gradlePluginPortal() // there by default\n  }\n}\n</code></pre>"},{"location":"changelog/#030","title":"0.3.0","text":"<p>2020-03-26</p> <ul> <li>Keeper now uses Zipflinger for packaging, which should give a nice speed boost in creating intermediate jars.</li> </ul> <p>Perf comparisons on the slack app:</p> Task Before After inferExternalStagingAndroidTestKeepRulesForKeeper 14.126s 11.138s jarExternalStagingClassesForKeeper 10.364s 6.347s jarExternalStagingAndroidTestClassesForKeeper 4.504s 2.609s <ul> <li>Keeper now only supports AGP 3.6 or higher. If you still need AGP 3.5.x support, please continue using Keeper 0.2.0 or lower.</li> <li>Update Kotlin to 1.3.71.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<p>2020-02-12</p>"},{"location":"changelog/#new-variant-filter-api-14","title":"New Variant Filter API #14","text":"<p>You can specify a variantFilter on the keeper extension to dynamically configure which variants Keeper operates on (similar to the Android Gradle Plugin\u2019s VariantFilter API).</p> <pre><code>keeper {\n  variantFilter {\n    if (name == \"variantThatShouldTotallyBeIgnored\") {\n      setIgnore(true)\n    }\n  }\n}\n</code></pre>"},{"location":"changelog/#r8-repository-management-opt-out-17","title":"R8 Repository Management Opt-Out #17","text":"<p>If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via <code>automaticR8RepoManagement</code>. Note that you\u2019ll need to manually add your own repo that the <code>keeperR8</code> configuration can resolve from.</p> <pre><code>keeper {\n  automaticR8RepoManagement = false\n}\n\n// Example demo of how to configure your own R8 repo\nrepositories {\n  maven {\n    url = uri(\"https://storage.googleapis.com/r8-releases/raw\")\n    content {\n      includeModule(\"com.android.tools\", \"r8\")\n    }\n  }\n}\n</code></pre>"},{"location":"changelog/#preliminary-support-for-agp-36","title":"Preliminary support for AGP 3.6","text":"<p>We\u2019ve tested up to 3.6-rc03, let us know if you see any issues!</p>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>2020-01-29</p> <p>Initial release!</p>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#introduction","title":"Introduction","text":"<p>Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.</p> <p>Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.</p> <p>This code and related pro`cedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.</p> <p>For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#basic-configuration","title":"Basic Configuration","text":"<p>In order to enable Keeper on a particular variant, you must register the <code>KeeperVariantMarker</code> extension in AGP\u2019s <code>VariantBuilder</code> API like so:</p> <pre><code>androidComponents {\n  beforeVariants { builder -&gt;\n    if (shouldRunKeeperOnVariant()) {\n      builder.optInToKeeper() // Helpful extension function\n    }\n  }\n}\n</code></pre> <p>Or in Groovy</p> <pre><code>androidComponents {\n  beforeVariants { builder -&gt;\n    if (shouldRunKeeperOnVariant(builder)) {\n      builder.registerExtension(KeeperVariantMarker.class, KeeperVariantMarker.INSTANCE)\n    }\n  }\n}\n</code></pre> <p>Keeper\u2019s default behavior with no configuration effectively be a no-op, which isn\u2019t what you want!</p>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":"<p>Normally, your app variant\u2019s minification task doesn\u2019t depend on compilation of its corresponding <code>androidTest</code> variant. This means you can call <code>assembleRelease</code> and <code>assembleAndroidTestRelease</code>  won\u2019t inherently run. Keeper, however, changes this since it requires the compiled androidTest  sources in order to correctly infer how they use APIs in the app variant. For a production build, you likely do want these \u201ctest-only\u201d APIs removed if possible though. There are a few patterns to better control this behavior via Gradle property.</p>"},{"location":"configuration/#simplest-solution","title":"Simplest solution","text":"<p>The simplest solution is to add a new build type that extends <code>release</code> but is solely used for these tests. This way it\u2019s identical to release in everything except the name.</p> <pre><code>android {\n  buildTypes {\n    staging {\n      initWith release\n    }\n  }\n\n  testBuildType = \"staging\"\n}\n</code></pre> <p>Now Keeper will only wire for the StagingAndroidTest build type and the <code>assembleRelease</code> dependency tree will remain untouched.</p> <p>This is the recommended solution, since builds that need this plugin likely already have custom logic in place for controlling <code>testBuildType</code> and it avoids messing with your normal release build.  This is what we do internally at Slack as well.</p>"},{"location":"configuration/#property-based-examples","title":"Property-based Examples","text":"<p>Let\u2019s assume an example command to build a production app with custom property <code>productionBuild</code>.</p> <pre><code>./gradlew :myapp:assembleRelease -PproductionBuild=true\n</code></pre>"},{"location":"configuration/#use-the-testbuildtype-option","title":"Use the <code>testBuildType</code> option","text":"<p>If you avoid setting your <code>testBuildType</code> to your \u201crelease\u201d build type in a production build, then Keeper won\u2019t configure your release artifact to depend on test sources since your release variant would no longer be the <code>testedVariant</code> of any <code>androidTest</code> variants.</p> <pre><code>android {\n  // ...\n\n  if (hasProperty(\"productionBuild\")) {\n    testBuildType = \"debug\"\n  } else {\n    testBuildType = \"release\"\n  }\n}\n</code></pre>"},{"location":"configuration/#avoid-applying-the-plugin-entirely","title":"Avoid applying the plugin entirely","text":"<p>This is probably the simplest approach, but not as dynamic as controlling the <code>testBuildType</code>.</p> <pre><code>if (!hasProperty(\"productionBuild\")) {\n  apply plugin: \"com.slack.keeper\"\n}\n</code></pre>"},{"location":"configuration/#_1","title":"<p>Everyone\u2019s project is different, so you should do whatever works for you! We\u2019re open to suggestions of better ways to support configuration for this, so please do file issues if you have any proposals.</p>","text":""},{"location":"configuration/#custom-r8-behavior","title":"Custom R8 behavior","text":"<p>Keeper uses R8\u2019s <code>TraceReferences</code> CLI under the hood for rules inference. By default it uses R8 version <code>3.2.78</code>. If you want to customize what version is used, you can specify the dependency via the <code>keeperR8</code> configuration. Note that these must be tags from R8\u2019s <code>r8-releases/raw</code> maven repo.</p> <pre><code>dependencies {\n  keeperR8 \"com.android.tools:r8:x.y.z\"\n}\n</code></pre> <p>If you don\u2019t want Keeper to automatically manage adding R8\u2019s maven repo, you can set disable it via <code>automaticR8RepoManagement</code>. Note that you\u2019ll need to manually add your own repo that the <code>keeperR8</code> configuration mentioned above can resolve from.</p> <pre><code>keeper {\n  automaticR8RepoManagement = false\n}\n</code></pre> <p>If you want to add custom JVM arguments to its invocation (i.e. for debugging), you and set them via the <code>keeper</code> extension.</p> <pre><code>keeper {\n  /**\n   * Optional custom jvm arguments to pass into the R8 `PrintUses` execution. Useful if you want\n   * to enable debugging in R8. Default is empty.\n   *\n   * Example: `listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y\")`\n   */\n  r8JvmArgs = []\n}\n</code></pre>"},{"location":"configuration/#tracereferences","title":"TraceReferences","text":"<p>Heads up!</p> <p>TraceReferences is still experimental. Before reporting issues, please check if it\u2019s an issue with Keeper or TraceReferences itself before filing. If it\u2019s an issue with TraceReferences, please file on the Android issue tracker instead: https://issuetracker.google.com/issues/new?component=326788</p> <p><code>TraceReferences</code> is a new tool for generating Proguard rules based on one jar\u2019s usage of classes in another jar. It is the formal successor and long-term replacement for the current <code>PrintUses</code> CLI that Keeper currently uses.</p> <pre><code>keeper {\n  traceReferences {\n    // Invoking this enables it!\n\n    // Optional: extra arguments to pass to TraceReferences\n    arguments.set(listOf(\"--map-diagnostics:MissingDefinitionsDiagnostic\", \"error\", \"info\"))\n  }\n}\n</code></pre> <p>Note that this uses the R8 version controlled by the R8 version defined by the <code>keeperR8</code> version. If you want to change it, set the version in <code>keeperR8</code> to whichever version you want (must be higher than <code>3.0.9-dev</code>).</p>"},{"location":"contributing/","title":"Contributors Guide","text":"<p>Interested in contributing? Awesome! Before you do though, please read our Code of Conduct. We take it very seriously, and expect that you will as well.</p> <p>There are many ways you can contribute! \u2764\ufe0f</p>"},{"location":"contributing/#bug-reports-and-fixes","title":"Bug Reports and Fixes \ud83d\udc1e","text":"<ul> <li>If you find a bug, please search for it in the issues, and if it isn\u2019t already tracked,    create a new issue. Fill out the \u201cBug Report\u201d section of the issue template. Even if an issue is closed, feel free to comment and add details, it will still    be reviewed.</li> <li>Issues that have already been identified as a bug (note: able to reproduce) will be labelled <code>bug</code>.</li> <li>If you\u2019d like to submit a fix for a bug, send a pull request and mention the issue number.<ul> <li>Include tests that isolate the bug and verifies that it was fixed.</li> </ul> </li> </ul>"},{"location":"contributing/#new-features","title":"New Features \ud83d\udca1","text":"<ul> <li>If you\u2019d like to add new functionality to this project, describe the problem you want to solve in a new issue.</li> <li>Issues that have been identified as a feature request will be labelled <code>enhancement</code>.</li> <li>If you\u2019d like to implement the new feature, please wait for feedback from the project    maintainers before spending too much time writing the code. In some cases, <code>enhancement</code>s may    not align well with the project objectives at the time.</li> </ul>"},{"location":"contributing/#tests-documentation-miscellaneous","title":"Tests \ud83d\udd0e, Documentation \ud83d\udcda, Miscellaneous \u2728","text":"<ul> <li>If you\u2019d like to improve the tests, you want to make the documentation clearer, you have an    alternative implementation of something that may have advantages over the way its currently    done, or you have any other change, we would be happy to hear about it!<ul> <li>If its a trivial change, go ahead and pull request with the changes you have in mind.</li> <li>If not, open an issue to discuss the idea first.</li> </ul> </li> </ul> <p>If you\u2019re new to our project and looking for some way to make your first contribution, look for issues labelled <code>good first contribution</code>.</p>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>For your contribution to be accepted:</p> <ul> <li>[x] You must have signed the Contributor License Agreement (CLA).</li> <li>[x] The test suite must be complete and pass.</li> <li>[x] The changes must be approved by code review.</li> <li>[x] Commits should be atomic and messages must be descriptive. Related issues should be mentioned by issue number.</li> </ul> <p>If the contribution doesn\u2019t meet the above criteria, you may fail our automated checks or a maintainer will discuss it with you. You can continue to improve a Pull Request by adding commits to the branch from which the PR was created.</p> <p>Interested in knowing more about about pull requests at Slack?</p>"},{"location":"contributing/#creating-a-pull-request","title":"Creating a Pull Request","text":"<ol> <li>\ud83c\udf74 Fork the repository on GitHub.</li> <li>\ud83c\udfc3\u200d\u2640\ufe0f Clone/fetch your fork to your local development machine. It\u2019s a good idea to run the tests just     to make sure everything is in order.</li> <li>\ud83c\udf3f Create a new branch and check it out.</li> <li>\ud83d\udd2e Make your changes and commit them locally. Magic happens here!</li> <li>\u2934\ufe0f Push your new branch to your fork. (e.g. <code>git push username fix-issue-16</code>).</li> <li>\ud83d\udce5 Open a Pull Request on github.com from your new branch on your fork to <code>main</code> in this     repository.</li> </ol>"},{"location":"contributing/#maintainers","title":"Maintainers","text":"<p>There are more details about processes and workflow in the Maintainer\u2019s Guide.</p>"}]}