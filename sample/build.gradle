/*
 * Copyright (C) 2020 Slack Technologies, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.android.build.gradle.internal.tasks.L8DexDesugarLibTask
import com.android.build.gradle.internal.tasks.R8Task
import com.slack.keeper.InferAndroidTestKeepRules
import kotlin.PreconditionsKt

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.slack.keeper'

android {
  compileSdk 31

  defaultConfig {
    applicationId "com.slack.keeper.example"
    minSdkVersion 21
    targetSdkVersion 31
    versionCode 1
    versionName "1"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testApplicationId "com.slack.keeper.sample.androidTest"
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    coreLibraryDesugaringEnabled = true
  }

  buildTypes {
    debug {
      matchingFallbacks = ['release']
    }
    release {
      minifyEnabled = true
      signingConfig = signingConfigs.debug
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.pro'
      testProguardFile('test-rules.pro')
      matchingFallbacks = ['release']
    }
    staging {
      initWith release
      debuggable true
    }
  }

  flavorDimensions "environment"
  productFlavors {
    internal {
      dimension "environment"
      applicationIdSuffix ".internal"
      versionNameSuffix "-internal"
    }

    external {
      dimension "environment"
    }
  }

  testBuildType = "staging"
}

// Controlled by Keeper CI for testing
boolean useTraceReferences = providers.gradleProperty("keeperTest.enableTraceReferences")
    .forUseAtConfigurationTime()
    .map { Boolean.parseBoolean(it) }
    .orElse(false)

keeper {
  // Example: Only enable on "externalStaging"
  variantFilter {
    setIgnore(name != "externalStaging")
  }

  // Example: emit extra debug information during Keeper's execution.
  emitDebugInformation = true

  // Example: automatic R8 repo management (more below)
  automaticR8RepoManagement = false

  // Example: share proguard rules for L8 (library desugaring).
  enableL8RuleSharing = true

  // Uncomment this line to debug the R8 from a remote instance.
  //r8JvmArgs.addAll(Arrays.asList("-Xdebug", "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"))

  if (useTraceReferences) {
    // Enable the new experimental TraceReferences tool.
    traceReferences {
      // Don't fail the build if missing definitions are found.
      arguments = ["--map-diagnostics:MissingDefinitionsDiagnostic", "error", "info"]
    }
  }
}

// To speed up testing, we can also eagerly check that the generated rules match what we expect.
// This is _solely_ for CI use with Keeper!
boolean isCi = providers.environmentVariable("CI").forUseAtConfigurationTime()
    .orElse("false")
    .get() == "true"
boolean verifyL8 = providers.environmentVariable("keeper.verifyL8").forUseAtConfigurationTime()
    .orElse("false")
    .get() == "true"
if (isCi) {
  tasks.withType(InferAndroidTestKeepRules)
      .configureEach {
        doLast {
          println "Checking expected rules"
          String outputRules = outputProguardRules.getAsFile().get().text
          String expectedRules = file("expectedRules.pro").text
          if (outputRules != expectedRules) {
            throw new IllegalStateException("Rules don't match expected, existing ones:\n$outputRules")
          }
        }
      }

  if (verifyL8) {
    tasks.withType(L8DexDesugarLibTask)
        .matching { it.name == "l8DexDesugarLibExternalStagingAndroidTest" }
        .configureEach {
          doLast {
            println "Checking expected input rules from diagnostics output"
            String diagnosticFilePath = "build/intermediates/keeper/l8-diagnostics/l8DexDesugarLibExternalStagingAndroidTest/patchedL8Rules.pro"
            String diagnostics = file(diagnosticFilePath).text
            if (!diagnostics.contains("-dontobfuscate")) {
              throw new IllegalStateException("L8 diagnostic rules don't have Keeper's configured '-dontobfuscate', see ${diagnosticFilePath}")
            } else if (!diagnostics.contains("-keep class j\$.time.Instant")) {
              throw new IllegalStateException("L8 diagnostic rules include the main variant's R8-generated rules, see ${diagnosticFilePath}")
            }
          }
        }
  }

  tasks.withType(R8Task)
        .matching { it.name == "minifyExternalStagingWithR8" }
        .configureEach { r8Task ->
          doLast {
            println "Checking expected configuration contains embedded library rules from androidTest"
            def output = r8Task.getProguardConfigurationOutput()
            String allConfigurations
            if (output instanceof Provider<File>) {
              // This is a Provider on AGP 7
              allConfigurations = output.get().text
            } else {
              allConfigurations = output.text
            }
            PreconditionsKt.check(allConfigurations.contains("-keep class slack.test.only.Android { *; }"))
            PreconditionsKt.check(allConfigurations.contains("-keep class slack.test.only.Embedded { *; }"))
          }
        }
}

// Example demo of how to configure your own R8 repo
repositories {
  // Limit this repo to only the R8 dependency
  //noinspection UnstableApiUsage
  exclusiveContent {
    forRepository {
      maven {
        url = "https://storage.googleapis.com/r8-releases/raw"
        content {
          includeModule("com.android.tools", "r8")
        }
      }
    }
    filter {
      includeModule("com.android.tools", "r8")
    }
  }
}

dependencies {
  implementation project(":sample-libraries:a")

  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

  androidTestImplementation project(":sample-libraries:c")
  androidTestImplementation "com.squareup.okio:okio:2.10.0"
  androidTestImplementation "androidx.annotation:annotation:1.2.0"
  androidTestImplementation "androidx.test:rules:1.4.0"
  androidTestImplementation "androidx.test:runner:1.4.0"
  androidTestUtil "androidx.test:orchestrator:1.4.0"
  androidTestImplementation "androidx.test.ext:junit:1.1.3"
  androidTestImplementation "junit:junit:4.13.2"
  androidTestImplementation "com.google.truth:truth:1.1.3"
  androidTestImplementation project(":sample-libraries:test-only-android")
  androidTestImplementation project(":sample-libraries:test-only-jvm")
}
